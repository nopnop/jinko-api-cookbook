#!/usr/bin/env bash
script_dir="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)" || {
  echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
  exit 2
}
script_name="$(basename "$(readlink -f "$0")")" || {
  echo "Couldn't determine the script's name, which probably matters, bailing out" >&2
  exit 2
}

# Created by argbash-init v2.10.0
# ARG_POSITIONAL_SINGLE([cookbook],[path to the Jupyter notebook])
# ARG_DEFAULTS_POS([])
# ARG_HELP([Run a Jupyter notebook with parameters])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
_arg_cookbook=
# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help() {
  printf '%s\n' "Run a Jupyter notebook with parameters"
  printf 'Usage: %s [-h|--help] <cookbook>\n' "$0"
  printf '\t%s\n' "<cookbook>: path to the Jupyter notebook"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  _positionals_count=0
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _last_positional="$1"
      _positionals+=("$_last_positional")
      _positionals_count=$((_positionals_count + 1))
      ;;
    esac
    shift
  done
}

handle_passed_args_count() {
  local _required_args_string="'cookbook'"
  test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
  test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}

assign_positional_args() {
  local _positional_name _shift_for=$1
  _positional_names="_arg_cookbook "

  shift "$_shift_for"
  for _positional_name in ${_positional_names}; do
    test $# -gt 0 || break
    eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
    shift
  done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

! [ -f "${_arg_cookbook}" ] && die "Notebook '${_arg_cookbook}' not found" 2

script_file=$(mktemp)
log_file=$(mktemp)

cleanup() {
  rm -f ${script_file}
  rm -f ${log_file}
}

updated_script_file=$(mktemp)

# convert notebook to python script
jupyter nbconvert --to script ${_arg_cookbook} --stdout >$script_file 2>$log_file
result=$?
if [ ${result} -ne 0 ]; then
  echo "Could not convert cookbook" 1>&2
  cat $log_file 1>&2
  cleanup
  exit 1
fi

# update python script
${script_dir}/update-notebook-script.py -i ${script_file} -o ${updated_script_file} -d 2>$log_file
result=$?
if [ ${result} -ne 0 ]; then
  echo "Could not update cookbook" 1>&2
  cat $log_file 1>&2
  cleanup
  exit 1
fi

# run updated python script
cd ${script_dir}/../cookbooks
python ${updated_script_file}
result=$?
if [ ${result} -ne 0 ]; then
  exit ${result}
fi
rm -f ${updated_script_file}

# ] <-- needed because of Argbash
