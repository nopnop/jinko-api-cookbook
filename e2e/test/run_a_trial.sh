#!/usr/bin/env bash
set -o pipefail

script_dir="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)" || {
  echo "Couldn't determine the script's running directory, which probably matters, bailing out" >&2
  exit 2
}
script_name="$(basename "$(readlink -f "$0")")" || {
  echo "Couldn't determine the script's name, which probably matters, bailing out" >&2
  exit 2
}

COOKBOOK=run_a_trial

# Created by argbash-init v2.10.0
# ARG_HELP([Create necessary resources and run the "${COOKBOOK}" cookbook])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='h'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS

print_help() {
  printf '%s\n' "Create necessary resources and run the \"${COOKBOOK}\" cookbook"
  printf 'Usage: %s [-h|--help]\n' "$0"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
      ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

lib_dir=${script_dir}/../lib
cookbooks_dir=${script_dir}/../../cookbooks
run_cookbook_script=${script_dir}/../../scripts/run-cookbook-with-parameters.sh

source ${jinko_seeder}/shell/auth.sh
check_auth || exit $?
source ${lib_dir}/path.sh
source ${lib_dir}/env.sh
source ${lib_dir}/api-key.sh

# seed necessary resources
echo "Seeding resources for cookbook '${COOKBOOK}'..." 1>&2

# create project & folder
folder=$(ensure_folder "${COOKBOOK}") || exit $?
project_id=$(get_project_id "${folder}") || exit $?
folder_id=$(get_folder_id "${folder}") || exit $?

# create API key
api_key=$(create_api_key "${project_id}" "${folder_id}") || exit $?
echo "${api_key}"

# log environment informations
email=$(get_email) || exit $?
frontend_url=$(get_frontend_url "${project_id}" "${folder_id}") || exit $?
api_url=$(get_api_url) || exit $?
echo "  Email: ${email}" 1>&2
echo "  Frontend url: ${frontend_url}" 1>&2
echo "  API url: ${api_url}" 1>&2

# execute cookbook
export JINKO_API_KEY=${api_key} JINKO_PROJECT_ID=${project_id} JINKO_BASE_URL=${api_url}
echo "Executing cookbook '${COOKBOOK}'..." 1>&2
# cookbook requires a folderId environment variable
export folderId=${folder_id}
${run_cookbook_script} ${cookbooks_dir}/${COOKBOOK}.ipynb || exit $?

exit 0

# ] <-- needed because of Argbash
